parameters:
  sample: ''
  image: ''
  provider: ''
  build: ''

jobs:
  - job: build
    displayName: Build ${{ parameters.sample }}/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }}

    pool:
      name: default
      demands:
        - VSTS_AGENT_CAP_VIRTUALIZATION_PROVIDER -equals ${{ parameters.provider }}

    timeoutInMinutes: 150

    steps:
      - checkout: self
        submodules: recursive

      - script: |
          dotnet --info

          dotnet tool restore
        displayName: Initialize build

      - script: |
          packer --version
        displayName: Initialize Packer

      - script: |
          vagrant --version
          vagrant plugin list

          vagrant box list
          vagrant global-status --prune
        displayName: Initialize Vagrant

      - script: |
          dotnet cake --sample ${{ parameters.sample }} --image ${{ parameters.image }} --provider ${{ parameters.provider }} --build ${{ parameters.build }} --target restore
        displayName: Restore

      - task: DownloadPipelineArtifact@2
        inputs:
          source: specific
          artifact: native-build
          targetPath: $(System.DefaultWorkingDirectory)/samples/${{ parameters.sample }}/artifacts/${{ parameters.image }}/${{ parameters.provider }}/native
          project: $(System.TeamProjectId)
          pipeline: $(resources.pipeline.source.pipelineID)
          runVersion: latestFromBranch
          runBranch: $(Build.SourceBranch)
        displayName: Download artifacts
        condition: and(succeeded(), eq('${{ parameters.build }}', 'native'), $(resources.pipeline.source))

      - task: DownloadPipelineArtifact@2
        inputs:
          source: current
          artifact: native-build
          targetPath: $(System.DefaultWorkingDirectory)/samples/${{ parameters.sample }}/artifacts/${{ parameters.image }}/${{ parameters.provider }}/native
        displayName: Download artifacts
        condition: and(succeeded(), eq('${{ parameters.build }}', 'vagrant'))

      - script: |
          dotnet cake --sample ${{ parameters.sample }} --image ${{ parameters.image }} --provider ${{ parameters.provider }} --build ${{ parameters.build }} --target build --exclusive
        displayName: Build

      - script: |
          dotnet cake --sample ${{ parameters.sample }} --image ${{ parameters.image }} --provider ${{ parameters.provider }} --build ${{ parameters.build }} --target test --exclusive
        displayName: Test

      - publish: $(System.DefaultWorkingDirectory)/samples/${{ parameters.sample }}/artifacts/${{ parameters.image }}/${{ parameters.provider }}/${{ parameters.build }}
        artifact: ${{ parameters.build }}-build
        displayName: Publish artifacts

      # - script: |
      #     dotnet cake build.cake --target=clean --configuration=${{ parameters.image }}-${{ parameters.provider }}-${{ parameters.configuration }} --recursive true
      #   displayName: Build - Clean
      #   condition: always()
